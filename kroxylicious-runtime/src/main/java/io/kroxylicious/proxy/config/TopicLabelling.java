/*
 * Copyright Kroxylicious Authors.
 *
 * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0
 */

package io.kroxylicious.proxy.config;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.regex.Pattern;
import java.util.stream.Stream;

import com.fasterxml.jackson.annotation.JsonCreator;

import io.kroxylicious.proxy.metadata.selector.Labels;

/**
 * Represents the labelling, with the given {@code labels}, of the topics which match any of the given requirements on topic names.
 * @param labels The labels
 * @param topicsNamed The names of topics to be labelled with {@code labels}.
 * @param topicsStartingWith The prefixes of names of topics to be labelled with {@code labels}.
 * @param topicsMatching Regular expressions matching the names of topics to be labelled with {@code labels}.
 */
public record TopicLabelling(Map<String, String> labels,
                             Set<String> topicsNamed,
                             TreeSet<String> topicsStartingWith,
                             List<Pattern> topicsMatching) {
    public TopicLabelling {
        Objects.requireNonNull(labels);
        if (labels.isEmpty()) {
            throw new IllegalArgumentException("Invalid labels");
        }
        Labels.validate(labels);
    }

    @JsonCreator
    public TopicLabelling(Map<String, String> labels,
                          List<String> topicsNamed,
                          List<String> topicsStartingWith,
                          List<String> topicsMatching) {
        this(labels, new HashSet<>(topicsNamed), new TreeSet<>(topicsStartingWith), topicsMatching.stream().map(Pattern::compile).toList());
    }

    /**
     * Determines whether the topic with the given {@code topicName} should be labelled with this labelling's {@link #labels()}.
     * @param topicName A topic's name
     * @return true if the topic should have this labelling's labels.
     */
    public boolean matches(String topicName) {
        if (topicsNamed().contains(topicName)) {
            return true;
        }
        String floor = topicsStartingWith().floor(topicName);
        if (floor != null && topicName.startsWith(floor)) {
            return true;
        }
        if (topicsMatching().stream().anyMatch(pattern -> pattern.matcher(topicName).matches())) {
            return true;
        }
        return false;
    }

    private boolean definitelyNoTopicsInCommon2(TopicLabelling other) {
        if (this.topicsMatching().isEmpty()
                && other.topicsMatching().isEmpty()) {
            var s = new HashSet<>(this.topicsNamed());
            s.retainAll(other.topicsNamed());
            if (s.isEmpty()) {
                return !matchesAnyNameOrPrefix(this, other)
                        && !matchesAnyNameOrPrefix(other, this);
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }

    /**
     * Return true if it is certain (or cannot be proven otherwise) that this labelling and the given {@code other} labelling
     * could apply to a topic in common.
     * There is no good known algorithm for proving the disjointness of the languages generated by two regular expressions
     * so this method will return true if either of the labellings uses regular expressions.
     * @param other The other labelling
     * @return True if there is, or could be, a topic which both this and the other labelling could apply to.
     */
    public boolean maybeSomeTopicsInCommon(TopicLabelling other) {
        return !definitelyNoTopicsInCommon2(other);
    }

    private static boolean matchesAnyNameOrPrefix(TopicLabelling labelling1, TopicLabelling labelling2) {
        return Stream.concat(
                labelling2.topicsNamed().stream(),
                labelling2.topicsStartingWith().stream()).anyMatch(labelling1::matches);
    }
}
